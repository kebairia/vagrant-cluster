# ---------------------------------------------------------------------
#+STARTUP:          content showstars indent
#+EXCLUDE_TAGS:     journal noexport
# ---------------------------------------------------------------------
#+html: <p align="center"><b> This repo still under construction ‚ùó </b></p>
#+html: <p align="center">
#+html: <img src="./img/const.png" alt="contruction image" width="80" align="center">
#+html: </p>
#+html: <hr>

* Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#intro][Introduction]]
- [[#config][Configuration file]]
- [[#vagrantfile][Vagrantfile]]
- [[#arch][Architecture]]
  - [[#global_config][Global Configuration]]
    - [[#network][Network]]
  - [[#srv][SRV (Services Server)]]
  - [[#edge][Edge]]
  - [[#fog][Fog]]
    - [[#file_sys][File system]]
    - [[#kubernetes][Kubernetes]]
- [[network][Network]]
- [[#usage][Usage]]
:END:

* Introduction
:PROPERTIES:
:CUSTOM_ID: intro
:END:

``Serverless Edge Computing: Application for Real-Time Suspicious Behavior Detection using Deep Learning''
#+begin_quote
This repository contains my implementation of a fully automated multi-layer infrastructure
for Real-Time Suspicious Behavior Detection Using Deep Learning Techniques, on an Edge Computing
Architecture with DevOps and Performance testing activities, developing automation frameworks, scalability Using Vagrant, Ansible and Packer, Docker,
Kubernetes, High Availability using Pacemaker HAProxy, Keepalived for services and GlusterFS, NFS-Ganesha for filesystem server ...
#+end_quote
* Configuration file
:PROPERTIES:
:CUSTOM_ID: config
:END:
The main reason I used an extra configuration file is that using vagrantfile is somewhat frustrating;
it requires a level of programming knowledge, and this project was aimed at a non-IT audience.

As a result, I needed to use a simple configuration file for specifying and creating the virtual machines cluster;
as you can see, the configuration file is self explanatory; however, I'll explain how to use it

#+begin_src yaml
    - name: test1
      box: centos/8
      memory: 512
      cpus: 1
      hostname: test1.esiedge.local
      mnm: "0E:51:ED:6E:01:00"
      add_int: "true"
      ints:
        - ip: 192.168.3.100
          method: "static"
          type: "public_network"
          mac: "0E:51:ED:6E:11:00" 
        - ip: 192.168.4.100
          method: "static"
          type: "private_network"
          mac: "0E:51:ED:6E:21:00" 
      add_disks: "true"
      disks: ["4G", "200G"]
      pool: "esiedge"
      prov: shell
      prov_file: "./configure-base-config.yml"
#+end_src yaml
* Vagrantfile
:PROPERTIES:
:CUSTOM_ID: vagrantfile
:END:
The vagrantfile's purpose here is to read the configuration file 'in my case [[file:servers.yaml][servers.yaml]] ' and obtain all
of the information about the virtual machine's fleet, and then provision them as requested by the command line.

- provisioning all virtual machines specified in the configuration file
#+begin_src sh :exports both
  vagrant up
#+end_src

- You can also specify a subset of the virtual machines.
#+begin_src sh :exports both
  vagrant up vm1 vm2
#+end_src
* Architecture
:PROPERTIES:
:CUSTOM_ID: arch
:END:
** Global configuration
:PROPERTIES:
:CUSTOM_ID: global_config
:END:
*** Network
:PROPERTIES:
:CUSTOM_ID: network
:END:
** SRV (Services)
:PROPERTIES:
:CUSTOM_ID: srv
:END:
The main reason we used *srv cluster server* is to provides all the necessary services for the Edge and Fog servers

It provide services like *DNS*, *DHCP*, *NTP* ...etc

The common thing between these services is that it serve the whole infrastructure

that all of these services are highly available, considering that the majority of them has a build-in failover mechanism
** Edge
:PROPERTIES:
:CUSTOM_ID: edge
:END:
The Edge on the other hand is made of multiple Raspberry PI that has direct connection to the camera's
** Fog
:PROPERTIES:
:CUSTOM_ID: fog
:END:
*** File system
:PROPERTIES:
:CUSTOM_ID: file_sys
:END:
*** Kubernetes
:PROPERTIES:
:CUSTOM_ID: kubernetes
:END:

* Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
setup you server's information on [[file:servers.yml]] file
  #+begin_src yaml
    - name: test1
      box: centos/8
      memory: 512
      cpus: 1
      hostname: test1.esiedge.local
      mnm: "0E:51:ED:6E:01:00"
      add_int: "true"
      ints:
        - ip: 192.168.3.100
          method: "static"
          type: "public_network"
          mac: "0E:51:ED:6E:11:00" 
        - ip: 192.168.4.100
          method: "static"
          type: "private_network"
          mac: "0E:51:ED:6E:21:00" 
      add_disks: "true"
      disks: ["4G", "200G"]
      pool: "esiedge"
      prov: shell
      prov_file: "./configure-base-config.yml"
    
    - name: test2
      box: centos/8
      memory: 512
      cpus: 2
      hostname: test2.esiedge.local
      mnm: "0E:51:ED:6E:01:02"
      add_int: "true"
      ints:
        - ip: 192.168.3.102
          method: "static"
          type: "public_network"
          mac: "0E:51:ED:6E:11:02" 
        - ip: 192.168.4.102
          method: "static"
          type: "private_network"
          mac: "0E:51:ED:6E:21:02" 
      add_disks: "true"
      disks: ["4G", "5G"]
      pool: "esiedge"
      prov: shell
      prov_file: "./configure-base-config.yml"
  #+end_src
- Bring up the whole infrastructure.
#+begin_src sh
  vagrant up 
#+end_src
- or you can bring up only one of the servers listed in the *YAML* file
#+begin_src sh
  vagrant up test2
#+end_src

- Testing 2 *Load Balancers* with a keepalived service, and 2 *syslog* servers, and a *testing* virtual machine
#+begin_src sh
  vagrant up lb1 lb2 syslog1 syslog2 test1
#+end_src
